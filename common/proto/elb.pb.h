// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elb.proto

#ifndef PROTOBUF_elb_2eproto__INCLUDED
#define PROTOBUF_elb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace elb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_elb_2eproto();
void protobuf_AssignDesc_elb_2eproto();
void protobuf_ShutdownFile_elb_2eproto();

class HostAddr;
class GetHostReq;
class GetHostRsp;
class ReportReq;
class GetRouteReq;
class GetRouteRsp;
class HostCallResult;
class ReportStatusReq;

enum MsgTypeId {
  GetHostReqId = 1,
  GetHostRspId = 2,
  ReportReqId = 3,
  GetRouteByToolReqId = 4,
  GetRouteByToolRspId = 5,
  GetRouteByAgentReqId = 6,
  GetRouteByAgentRspId = 7,
  ReportStatusReqId = 8,
  GetRouteByAPIReqId = 9
};
bool MsgTypeId_IsValid(int value);
const MsgTypeId MsgTypeId_MIN = GetHostReqId;
const MsgTypeId MsgTypeId_MAX = GetRouteByAPIReqId;
const int MsgTypeId_ARRAYSIZE = MsgTypeId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgTypeId_descriptor();
inline const ::std::string& MsgTypeId_Name(MsgTypeId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgTypeId_descriptor(), value);
}
inline bool MsgTypeId_Parse(
    const ::std::string& name, MsgTypeId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgTypeId>(
    MsgTypeId_descriptor(), name, value);
}
// ===================================================================

class HostAddr : public ::google::protobuf::Message {
 public:
  HostAddr();
  virtual ~HostAddr();

  HostAddr(const HostAddr& from);

  inline HostAddr& operator=(const HostAddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostAddr& default_instance();

  void Swap(HostAddr* other);

  // implements Message ----------------------------------------------

  HostAddr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostAddr& from);
  void MergeFrom(const HostAddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline ::google::protobuf::int32 ip() const;
  inline void set_ip(::google::protobuf::int32 value);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:elb.HostAddr)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static HostAddr* default_instance_;
};
// -------------------------------------------------------------------

class GetHostReq : public ::google::protobuf::Message {
 public:
  GetHostReq();
  virtual ~GetHostReq();

  GetHostReq(const GetHostReq& from);

  inline GetHostReq& operator=(const GetHostReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHostReq& default_instance();

  void Swap(GetHostReq* other);

  // implements Message ----------------------------------------------

  GetHostReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHostReq& from);
  void MergeFrom(const GetHostReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // required int32 modid = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModidFieldNumber = 2;
  inline ::google::protobuf::int32 modid() const;
  inline void set_modid(::google::protobuf::int32 value);

  // required int32 cmdid = 3;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 3;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:elb.GetHostReq)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::int32 modid_;
  ::google::protobuf::int32 cmdid_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static GetHostReq* default_instance_;
};
// -------------------------------------------------------------------

class GetHostRsp : public ::google::protobuf::Message {
 public:
  GetHostRsp();
  virtual ~GetHostRsp();

  GetHostRsp(const GetHostRsp& from);

  inline GetHostRsp& operator=(const GetHostRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetHostRsp& default_instance();

  void Swap(GetHostRsp* other);

  // implements Message ----------------------------------------------

  GetHostRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetHostRsp& from);
  void MergeFrom(const GetHostRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // required int32 modid = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModidFieldNumber = 2;
  inline ::google::protobuf::int32 modid() const;
  inline void set_modid(::google::protobuf::int32 value);

  // required int32 cmdid = 3;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 3;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // required int32 retcode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional .elb.HostAddr host = 5;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 5;
  inline const ::elb::HostAddr& host() const;
  inline ::elb::HostAddr* mutable_host();
  inline ::elb::HostAddr* release_host();
  inline void set_allocated_host(::elb::HostAddr* host);

  // @@protoc_insertion_point(class_scope:elb.GetHostRsp)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::int32 modid_;
  ::google::protobuf::int32 cmdid_;
  ::google::protobuf::int32 retcode_;
  ::elb::HostAddr* host_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static GetHostRsp* default_instance_;
};
// -------------------------------------------------------------------

class ReportReq : public ::google::protobuf::Message {
 public:
  ReportReq();
  virtual ~ReportReq();

  ReportReq(const ReportReq& from);

  inline ReportReq& operator=(const ReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportReq& default_instance();

  void Swap(ReportReq* other);

  // implements Message ----------------------------------------------

  ReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportReq& from);
  void MergeFrom(const ReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 modid = 1;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModidFieldNumber = 1;
  inline ::google::protobuf::int32 modid() const;
  inline void set_modid(::google::protobuf::int32 value);

  // required int32 cmdid = 2;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 2;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // required .elb.HostAddr host = 3;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 3;
  inline const ::elb::HostAddr& host() const;
  inline ::elb::HostAddr* mutable_host();
  inline ::elb::HostAddr* release_host();
  inline void set_allocated_host(::elb::HostAddr* host);

  // required int32 retcode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:elb.ReportReq)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 modid_;
  ::google::protobuf::int32 cmdid_;
  ::elb::HostAddr* host_;
  ::google::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static ReportReq* default_instance_;
};
// -------------------------------------------------------------------

class GetRouteReq : public ::google::protobuf::Message {
 public:
  GetRouteReq();
  virtual ~GetRouteReq();

  GetRouteReq(const GetRouteReq& from);

  inline GetRouteReq& operator=(const GetRouteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRouteReq& default_instance();

  void Swap(GetRouteReq* other);

  // implements Message ----------------------------------------------

  GetRouteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRouteReq& from);
  void MergeFrom(const GetRouteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 modid = 1;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModidFieldNumber = 1;
  inline ::google::protobuf::int32 modid() const;
  inline void set_modid(::google::protobuf::int32 value);

  // required int32 cmdid = 2;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 2;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:elb.GetRouteReq)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 modid_;
  ::google::protobuf::int32 cmdid_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static GetRouteReq* default_instance_;
};
// -------------------------------------------------------------------

class GetRouteRsp : public ::google::protobuf::Message {
 public:
  GetRouteRsp();
  virtual ~GetRouteRsp();

  GetRouteRsp(const GetRouteRsp& from);

  inline GetRouteRsp& operator=(const GetRouteRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRouteRsp& default_instance();

  void Swap(GetRouteRsp* other);

  // implements Message ----------------------------------------------

  GetRouteRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRouteRsp& from);
  void MergeFrom(const GetRouteRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 modid = 1;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModidFieldNumber = 1;
  inline ::google::protobuf::int32 modid() const;
  inline void set_modid(::google::protobuf::int32 value);

  // required int32 cmdid = 2;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 2;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // repeated .elb.HostAddr hosts = 3;
  inline int hosts_size() const;
  inline void clear_hosts();
  static const int kHostsFieldNumber = 3;
  inline const ::elb::HostAddr& hosts(int index) const;
  inline ::elb::HostAddr* mutable_hosts(int index);
  inline ::elb::HostAddr* add_hosts();
  inline const ::google::protobuf::RepeatedPtrField< ::elb::HostAddr >&
      hosts() const;
  inline ::google::protobuf::RepeatedPtrField< ::elb::HostAddr >*
      mutable_hosts();

  // optional bool overload = 4;
  inline bool has_overload() const;
  inline void clear_overload();
  static const int kOverloadFieldNumber = 4;
  inline bool overload() const;
  inline void set_overload(bool value);

  // @@protoc_insertion_point(class_scope:elb.GetRouteRsp)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_overload();
  inline void clear_has_overload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 modid_;
  ::google::protobuf::int32 cmdid_;
  ::google::protobuf::RepeatedPtrField< ::elb::HostAddr > hosts_;
  bool overload_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static GetRouteRsp* default_instance_;
};
// -------------------------------------------------------------------

class HostCallResult : public ::google::protobuf::Message {
 public:
  HostCallResult();
  virtual ~HostCallResult();

  HostCallResult(const HostCallResult& from);

  inline HostCallResult& operator=(const HostCallResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HostCallResult& default_instance();

  void Swap(HostCallResult* other);

  // implements Message ----------------------------------------------

  HostCallResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostCallResult& from);
  void MergeFrom(const HostCallResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline ::google::protobuf::int32 ip() const;
  inline void set_ip(::google::protobuf::int32 value);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required uint32 succ = 3;
  inline bool has_succ() const;
  inline void clear_succ();
  static const int kSuccFieldNumber = 3;
  inline ::google::protobuf::uint32 succ() const;
  inline void set_succ(::google::protobuf::uint32 value);

  // required uint32 err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline ::google::protobuf::uint32 err() const;
  inline void set_err(::google::protobuf::uint32 value);

  // required bool overload = 5;
  inline bool has_overload() const;
  inline void clear_overload();
  static const int kOverloadFieldNumber = 5;
  inline bool overload() const;
  inline void set_overload(bool value);

  // @@protoc_insertion_point(class_scope:elb.HostCallResult)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_succ();
  inline void clear_has_succ();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_overload();
  inline void clear_has_overload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint32 succ_;
  ::google::protobuf::uint32 err_;
  bool overload_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static HostCallResult* default_instance_;
};
// -------------------------------------------------------------------

class ReportStatusReq : public ::google::protobuf::Message {
 public:
  ReportStatusReq();
  virtual ~ReportStatusReq();

  ReportStatusReq(const ReportStatusReq& from);

  inline ReportStatusReq& operator=(const ReportStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportStatusReq& default_instance();

  void Swap(ReportStatusReq* other);

  // implements Message ----------------------------------------------

  ReportStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportStatusReq& from);
  void MergeFrom(const ReportStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 modid = 1;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModidFieldNumber = 1;
  inline ::google::protobuf::int32 modid() const;
  inline void set_modid(::google::protobuf::int32 value);

  // required int32 cmdid = 2;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdidFieldNumber = 2;
  inline ::google::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google::protobuf::int32 value);

  // required int32 caller = 3;
  inline bool has_caller() const;
  inline void clear_caller();
  static const int kCallerFieldNumber = 3;
  inline ::google::protobuf::int32 caller() const;
  inline void set_caller(::google::protobuf::int32 value);

  // repeated .elb.HostCallResult results = 4;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 4;
  inline const ::elb::HostCallResult& results(int index) const;
  inline ::elb::HostCallResult* mutable_results(int index);
  inline ::elb::HostCallResult* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::elb::HostCallResult >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::elb::HostCallResult >*
      mutable_results();

  // required uint32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:elb.ReportStatusReq)
 private:
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_caller();
  inline void clear_has_caller();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 modid_;
  ::google::protobuf::int32 cmdid_;
  ::google::protobuf::RepeatedPtrField< ::elb::HostCallResult > results_;
  ::google::protobuf::int32 caller_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_elb_2eproto();
  friend void protobuf_AssignDesc_elb_2eproto();
  friend void protobuf_ShutdownFile_elb_2eproto();

  void InitAsDefaultInstance();
  static ReportStatusReq* default_instance_;
};
// ===================================================================


// ===================================================================

// HostAddr

// required int32 ip = 1;
inline bool HostAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostAddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostAddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostAddr::clear_ip() {
  ip_ = 0;
  clear_has_ip();
}
inline ::google::protobuf::int32 HostAddr::ip() const {
  // @@protoc_insertion_point(field_get:elb.HostAddr.ip)
  return ip_;
}
inline void HostAddr::set_ip(::google::protobuf::int32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:elb.HostAddr.ip)
}

// required int32 port = 2;
inline bool HostAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HostAddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HostAddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HostAddr::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 HostAddr::port() const {
  // @@protoc_insertion_point(field_get:elb.HostAddr.port)
  return port_;
}
inline void HostAddr::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:elb.HostAddr.port)
}

// -------------------------------------------------------------------

// GetHostReq

// required uint32 seq = 1;
inline bool GetHostReq::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHostReq::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHostReq::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHostReq::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 GetHostReq::seq() const {
  // @@protoc_insertion_point(field_get:elb.GetHostReq.seq)
  return seq_;
}
inline void GetHostReq::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostReq.seq)
}

// required int32 modid = 2;
inline bool GetHostReq::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHostReq::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHostReq::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHostReq::clear_modid() {
  modid_ = 0;
  clear_has_modid();
}
inline ::google::protobuf::int32 GetHostReq::modid() const {
  // @@protoc_insertion_point(field_get:elb.GetHostReq.modid)
  return modid_;
}
inline void GetHostReq::set_modid(::google::protobuf::int32 value) {
  set_has_modid();
  modid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostReq.modid)
}

// required int32 cmdid = 3;
inline bool GetHostReq::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHostReq::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHostReq::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHostReq::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 GetHostReq::cmdid() const {
  // @@protoc_insertion_point(field_get:elb.GetHostReq.cmdid)
  return cmdid_;
}
inline void GetHostReq::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostReq.cmdid)
}

// -------------------------------------------------------------------

// GetHostRsp

// required uint32 seq = 1;
inline bool GetHostRsp::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHostRsp::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHostRsp::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHostRsp::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 GetHostRsp::seq() const {
  // @@protoc_insertion_point(field_get:elb.GetHostRsp.seq)
  return seq_;
}
inline void GetHostRsp::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostRsp.seq)
}

// required int32 modid = 2;
inline bool GetHostRsp::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHostRsp::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHostRsp::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHostRsp::clear_modid() {
  modid_ = 0;
  clear_has_modid();
}
inline ::google::protobuf::int32 GetHostRsp::modid() const {
  // @@protoc_insertion_point(field_get:elb.GetHostRsp.modid)
  return modid_;
}
inline void GetHostRsp::set_modid(::google::protobuf::int32 value) {
  set_has_modid();
  modid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostRsp.modid)
}

// required int32 cmdid = 3;
inline bool GetHostRsp::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHostRsp::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHostRsp::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHostRsp::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 GetHostRsp::cmdid() const {
  // @@protoc_insertion_point(field_get:elb.GetHostRsp.cmdid)
  return cmdid_;
}
inline void GetHostRsp::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostRsp.cmdid)
}

// required int32 retcode = 4;
inline bool GetHostRsp::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetHostRsp::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetHostRsp::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetHostRsp::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 GetHostRsp::retcode() const {
  // @@protoc_insertion_point(field_get:elb.GetHostRsp.retcode)
  return retcode_;
}
inline void GetHostRsp::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:elb.GetHostRsp.retcode)
}

// optional .elb.HostAddr host = 5;
inline bool GetHostRsp::has_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetHostRsp::set_has_host() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetHostRsp::clear_has_host() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetHostRsp::clear_host() {
  if (host_ != NULL) host_->::elb::HostAddr::Clear();
  clear_has_host();
}
inline const ::elb::HostAddr& GetHostRsp::host() const {
  // @@protoc_insertion_point(field_get:elb.GetHostRsp.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::elb::HostAddr* GetHostRsp::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::elb::HostAddr;
  // @@protoc_insertion_point(field_mutable:elb.GetHostRsp.host)
  return host_;
}
inline ::elb::HostAddr* GetHostRsp::release_host() {
  clear_has_host();
  ::elb::HostAddr* temp = host_;
  host_ = NULL;
  return temp;
}
inline void GetHostRsp::set_allocated_host(::elb::HostAddr* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:elb.GetHostRsp.host)
}

// -------------------------------------------------------------------

// ReportReq

// required int32 modid = 1;
inline bool ReportReq::has_modid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportReq::set_has_modid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportReq::clear_has_modid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportReq::clear_modid() {
  modid_ = 0;
  clear_has_modid();
}
inline ::google::protobuf::int32 ReportReq::modid() const {
  // @@protoc_insertion_point(field_get:elb.ReportReq.modid)
  return modid_;
}
inline void ReportReq::set_modid(::google::protobuf::int32 value) {
  set_has_modid();
  modid_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportReq.modid)
}

// required int32 cmdid = 2;
inline bool ReportReq::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportReq::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportReq::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportReq::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 ReportReq::cmdid() const {
  // @@protoc_insertion_point(field_get:elb.ReportReq.cmdid)
  return cmdid_;
}
inline void ReportReq::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportReq.cmdid)
}

// required .elb.HostAddr host = 3;
inline bool ReportReq::has_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportReq::set_has_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportReq::clear_has_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportReq::clear_host() {
  if (host_ != NULL) host_->::elb::HostAddr::Clear();
  clear_has_host();
}
inline const ::elb::HostAddr& ReportReq::host() const {
  // @@protoc_insertion_point(field_get:elb.ReportReq.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::elb::HostAddr* ReportReq::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::elb::HostAddr;
  // @@protoc_insertion_point(field_mutable:elb.ReportReq.host)
  return host_;
}
inline ::elb::HostAddr* ReportReq::release_host() {
  clear_has_host();
  ::elb::HostAddr* temp = host_;
  host_ = NULL;
  return temp;
}
inline void ReportReq::set_allocated_host(::elb::HostAddr* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:elb.ReportReq.host)
}

// required int32 retcode = 4;
inline bool ReportReq::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportReq::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportReq::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportReq::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 ReportReq::retcode() const {
  // @@protoc_insertion_point(field_get:elb.ReportReq.retcode)
  return retcode_;
}
inline void ReportReq::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportReq.retcode)
}

// -------------------------------------------------------------------

// GetRouteReq

// required int32 modid = 1;
inline bool GetRouteReq::has_modid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRouteReq::set_has_modid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRouteReq::clear_has_modid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRouteReq::clear_modid() {
  modid_ = 0;
  clear_has_modid();
}
inline ::google::protobuf::int32 GetRouteReq::modid() const {
  // @@protoc_insertion_point(field_get:elb.GetRouteReq.modid)
  return modid_;
}
inline void GetRouteReq::set_modid(::google::protobuf::int32 value) {
  set_has_modid();
  modid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetRouteReq.modid)
}

// required int32 cmdid = 2;
inline bool GetRouteReq::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRouteReq::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRouteReq::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRouteReq::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 GetRouteReq::cmdid() const {
  // @@protoc_insertion_point(field_get:elb.GetRouteReq.cmdid)
  return cmdid_;
}
inline void GetRouteReq::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetRouteReq.cmdid)
}

// -------------------------------------------------------------------

// GetRouteRsp

// required int32 modid = 1;
inline bool GetRouteRsp::has_modid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRouteRsp::set_has_modid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRouteRsp::clear_has_modid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRouteRsp::clear_modid() {
  modid_ = 0;
  clear_has_modid();
}
inline ::google::protobuf::int32 GetRouteRsp::modid() const {
  // @@protoc_insertion_point(field_get:elb.GetRouteRsp.modid)
  return modid_;
}
inline void GetRouteRsp::set_modid(::google::protobuf::int32 value) {
  set_has_modid();
  modid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetRouteRsp.modid)
}

// required int32 cmdid = 2;
inline bool GetRouteRsp::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetRouteRsp::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetRouteRsp::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetRouteRsp::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 GetRouteRsp::cmdid() const {
  // @@protoc_insertion_point(field_get:elb.GetRouteRsp.cmdid)
  return cmdid_;
}
inline void GetRouteRsp::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:elb.GetRouteRsp.cmdid)
}

// repeated .elb.HostAddr hosts = 3;
inline int GetRouteRsp::hosts_size() const {
  return hosts_.size();
}
inline void GetRouteRsp::clear_hosts() {
  hosts_.Clear();
}
inline const ::elb::HostAddr& GetRouteRsp::hosts(int index) const {
  // @@protoc_insertion_point(field_get:elb.GetRouteRsp.hosts)
  return hosts_.Get(index);
}
inline ::elb::HostAddr* GetRouteRsp::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:elb.GetRouteRsp.hosts)
  return hosts_.Mutable(index);
}
inline ::elb::HostAddr* GetRouteRsp::add_hosts() {
  // @@protoc_insertion_point(field_add:elb.GetRouteRsp.hosts)
  return hosts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::elb::HostAddr >&
GetRouteRsp::hosts() const {
  // @@protoc_insertion_point(field_list:elb.GetRouteRsp.hosts)
  return hosts_;
}
inline ::google::protobuf::RepeatedPtrField< ::elb::HostAddr >*
GetRouteRsp::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:elb.GetRouteRsp.hosts)
  return &hosts_;
}

// optional bool overload = 4;
inline bool GetRouteRsp::has_overload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetRouteRsp::set_has_overload() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetRouteRsp::clear_has_overload() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetRouteRsp::clear_overload() {
  overload_ = false;
  clear_has_overload();
}
inline bool GetRouteRsp::overload() const {
  // @@protoc_insertion_point(field_get:elb.GetRouteRsp.overload)
  return overload_;
}
inline void GetRouteRsp::set_overload(bool value) {
  set_has_overload();
  overload_ = value;
  // @@protoc_insertion_point(field_set:elb.GetRouteRsp.overload)
}

// -------------------------------------------------------------------

// HostCallResult

// required int32 ip = 1;
inline bool HostCallResult::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostCallResult::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostCallResult::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostCallResult::clear_ip() {
  ip_ = 0;
  clear_has_ip();
}
inline ::google::protobuf::int32 HostCallResult::ip() const {
  // @@protoc_insertion_point(field_get:elb.HostCallResult.ip)
  return ip_;
}
inline void HostCallResult::set_ip(::google::protobuf::int32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:elb.HostCallResult.ip)
}

// required int32 port = 2;
inline bool HostCallResult::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HostCallResult::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HostCallResult::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HostCallResult::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 HostCallResult::port() const {
  // @@protoc_insertion_point(field_get:elb.HostCallResult.port)
  return port_;
}
inline void HostCallResult::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:elb.HostCallResult.port)
}

// required uint32 succ = 3;
inline bool HostCallResult::has_succ() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HostCallResult::set_has_succ() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HostCallResult::clear_has_succ() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HostCallResult::clear_succ() {
  succ_ = 0u;
  clear_has_succ();
}
inline ::google::protobuf::uint32 HostCallResult::succ() const {
  // @@protoc_insertion_point(field_get:elb.HostCallResult.succ)
  return succ_;
}
inline void HostCallResult::set_succ(::google::protobuf::uint32 value) {
  set_has_succ();
  succ_ = value;
  // @@protoc_insertion_point(field_set:elb.HostCallResult.succ)
}

// required uint32 err = 4;
inline bool HostCallResult::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HostCallResult::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HostCallResult::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HostCallResult::clear_err() {
  err_ = 0u;
  clear_has_err();
}
inline ::google::protobuf::uint32 HostCallResult::err() const {
  // @@protoc_insertion_point(field_get:elb.HostCallResult.err)
  return err_;
}
inline void HostCallResult::set_err(::google::protobuf::uint32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:elb.HostCallResult.err)
}

// required bool overload = 5;
inline bool HostCallResult::has_overload() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HostCallResult::set_has_overload() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HostCallResult::clear_has_overload() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HostCallResult::clear_overload() {
  overload_ = false;
  clear_has_overload();
}
inline bool HostCallResult::overload() const {
  // @@protoc_insertion_point(field_get:elb.HostCallResult.overload)
  return overload_;
}
inline void HostCallResult::set_overload(bool value) {
  set_has_overload();
  overload_ = value;
  // @@protoc_insertion_point(field_set:elb.HostCallResult.overload)
}

// -------------------------------------------------------------------

// ReportStatusReq

// required int32 modid = 1;
inline bool ReportStatusReq::has_modid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportStatusReq::set_has_modid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportStatusReq::clear_has_modid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportStatusReq::clear_modid() {
  modid_ = 0;
  clear_has_modid();
}
inline ::google::protobuf::int32 ReportStatusReq::modid() const {
  // @@protoc_insertion_point(field_get:elb.ReportStatusReq.modid)
  return modid_;
}
inline void ReportStatusReq::set_modid(::google::protobuf::int32 value) {
  set_has_modid();
  modid_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportStatusReq.modid)
}

// required int32 cmdid = 2;
inline bool ReportStatusReq::has_cmdid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportStatusReq::set_has_cmdid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportStatusReq::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportStatusReq::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google::protobuf::int32 ReportStatusReq::cmdid() const {
  // @@protoc_insertion_point(field_get:elb.ReportStatusReq.cmdid)
  return cmdid_;
}
inline void ReportStatusReq::set_cmdid(::google::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportStatusReq.cmdid)
}

// required int32 caller = 3;
inline bool ReportStatusReq::has_caller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportStatusReq::set_has_caller() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportStatusReq::clear_has_caller() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportStatusReq::clear_caller() {
  caller_ = 0;
  clear_has_caller();
}
inline ::google::protobuf::int32 ReportStatusReq::caller() const {
  // @@protoc_insertion_point(field_get:elb.ReportStatusReq.caller)
  return caller_;
}
inline void ReportStatusReq::set_caller(::google::protobuf::int32 value) {
  set_has_caller();
  caller_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportStatusReq.caller)
}

// repeated .elb.HostCallResult results = 4;
inline int ReportStatusReq::results_size() const {
  return results_.size();
}
inline void ReportStatusReq::clear_results() {
  results_.Clear();
}
inline const ::elb::HostCallResult& ReportStatusReq::results(int index) const {
  // @@protoc_insertion_point(field_get:elb.ReportStatusReq.results)
  return results_.Get(index);
}
inline ::elb::HostCallResult* ReportStatusReq::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:elb.ReportStatusReq.results)
  return results_.Mutable(index);
}
inline ::elb::HostCallResult* ReportStatusReq::add_results() {
  // @@protoc_insertion_point(field_add:elb.ReportStatusReq.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::elb::HostCallResult >&
ReportStatusReq::results() const {
  // @@protoc_insertion_point(field_list:elb.ReportStatusReq.results)
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::elb::HostCallResult >*
ReportStatusReq::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:elb.ReportStatusReq.results)
  return &results_;
}

// required uint32 ts = 5;
inline bool ReportStatusReq::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReportStatusReq::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReportStatusReq::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReportStatusReq::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 ReportStatusReq::ts() const {
  // @@protoc_insertion_point(field_get:elb.ReportStatusReq.ts)
  return ts_;
}
inline void ReportStatusReq::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:elb.ReportStatusReq.ts)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace elb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::elb::MsgTypeId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::elb::MsgTypeId>() {
  return ::elb::MsgTypeId_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_elb_2eproto__INCLUDED
